

		# show_image("ROI image", ROI_img)

		#Erosion
		# for i in range(0, 3):
		# 	eroded = cv2.erode(img_thresh, None, iterations=i+1)
		# 	cv2.imshow("Eroded {} times".format(i+1), eroded)
		# 	cv2.waitKey(0)

		#Dilation
		# for i in range(0, 3):	
		# 	dilated = cv2.dilate(img_thresh, None, iterations=i+1)
		# 	cv2.imshow("Dilated {} times".format(i+1), dilated)
		
		# 	cv2.waitKey(0)

		# exit()

		# # variables for GrabCut algorithm
		# rectangle_coordinates=(x-offset_minus, y-offset_minus, x + w + offset_plus, y + h + offset_plus)
		# fgModel = np.zeros((1, 65), dtype="float")
		# bgModel = np.zeros((1, 65), dtype="float")
		# mask = np.zeros(gauss_img.shape[:2], dtype="uint8")

		# gauss_img_color = cv2.cvtColor(gauss_img, cv2.COLOR_GRAY2BGR)

		# start = time.time()
		# (mask, bgModel, fgModel) = cv2.grabCut(gauss_img_color, mask, rectangle_coordinates, bgModel, fgModel, iterCount=5, mode=cv2.GC_INIT_WITH_RECT)
		# end = time.time()
		# print("[INFO] applying GrabCut took {:.2f} seconds".format(end - start) + " for " + full_path)

		# values = (
		# 	("Definite Background", cv2.GC_BGD),
		# 	("Probable Background", cv2.GC_PR_BGD),
		# 	("Definite Foreground", cv2.GC_FGD),
		# 	("Probable Foreground", cv2.GC_PR_FGD),
		# )
		# # loop over the possible GrabCut mask values
		# for (name, value) in values:
		# 	# construct a mask that for the current value
		# 	# print("[INFO] showing mask for '{}'".format(name))
		# 	valueMask = (mask == value).astype("uint8") * 255
		# 	# # display the mask so we can visualize it
		# 	# cv2.imshow(name, valueMask)
		# 	# cv2.waitKey(0)

		# # we'll set all definite background and probable background pixels
		# # to 0 while definite foreground and probable foreground pixels are
		# # set to 1
		# outputMask = np.where((mask == cv2.GC_BGD) | (mask == cv2.GC_PR_BGD), 0, 1)
		# # scale the mask from the range [0, 1] to [0, 255]
		# outputMask = (outputMask * 255).astype("uint8")
		# # apply a bitwise AND to the image using our mask generated by
		# # GrabCut to generate our final output image
		# output = cv2.bitwise_and(gauss_img, gauss_img, mask=outputMask)
		# output = output[y - offset_minus : y - offset_minus + h + offset_plus, x - offset_minus : x - offset_minus + w + offset_plus]


		# # show the input image followed by the mask and output generated by
		# # GrabCut and bitwise masking
		# # cv2.imshow("Input", gauss_img)
		# # cv2.imshow("GrabCut Mask", outputMask)
		# cv2.imshow("GrabCut Output", output)
		# cv2.waitKey(0)


		# # Save ROI image
		# cv2.imwrite('test.jpg', ROI)
		# cv2.imwrite('out_melanoma.jpg', output)
		